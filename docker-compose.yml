version: "3.9"
services:
  frontend:
    container_name: frontend
    build: ./frontend
    environment:
      - REACT_APP_BACKEND_HOSTNAME=localhost
      - REACT_APP_BACKEND_PORT=3006
    ports:
      - 3005:3005
    networks:
      - node-network
    command: ["npm", "start"] # Boa prática: usar array para comandos
    restart: on-failure
    depends_on:
      - backend # Ordem de inicialização (mas não espera "healthcheck" por padrão)

  backend:
    container_name: backend
    build: ./backend
    environment:
      - PORT=3006
      - SECRET=super_senha
      - DATABASE_URL=mysql://root:root@db-todo-list:3306/to-do_List
    ports:
      - 3006:3006
    networks:
      - node-network
    command: ["npm", "run", "docker"] # Boa prática: usar array para comandos
    restart: on-failure
    depends_on:
      - db-todo-list # O backend depende do banco de dados
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006"] # Verifica se o backend responde na porta 3006
      interval: 10s
      timeout: 5s
      retries: 5

  db-todo-list:
    image: mysql:5.7 # Usando a imagem do MySQL 5.7
    command: --innodb-use-native-aio=0 # Comando adicional para evitar problemas com AIO no MySQL
    container_name: db
    restart: always
    tty: true # Garante operação estável em contêineres interativos
    environment:
      - MYSQL_ROOT_PASSWORD=root # Senha para o usuário root
      - MYSQL_DATABASE=to-do_List # Cria o banco de dados automaticamente
    networks:
      - node-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u", "root", "-proot"] # Verifica se o MySQL está rodando
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s # Aguarda o banco inicializar corretamente

networks:
  node-network:
    driver: bridge # Rede do tipo bridge para comunicação entre os serviços
